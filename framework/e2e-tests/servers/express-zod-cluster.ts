/* eslint-disable @typescript-eslint/no-unused-vars */
import { noop } from '@forklaunch/common';
import {
  OpenTelemetryCollector,
  sdkClient,
  sdkRouter
} from '@forklaunch/core/http';
import {
  forklaunchExpress,
  forklaunchRouter,
  handlers,
  ParsedQs
} from '@forklaunch/express';
import {
  array,
  date,
  file,
  number,
  optional,
  SchemaValidator,
  string,
  union,
  uuid
} from '@forklaunch/validator/zod';
import { NextFunction, Request, Response } from 'express';
import { JWTPayload } from 'jose';

const zodSchemaValidator = SchemaValidator();
const openTelemetryCollector = new OpenTelemetryCollector('test');

const forklaunchApplication = forklaunchExpress(
  zodSchemaValidator,
  openTelemetryCollector,
  {
    hosting: {
      workerCount: 2
    }
  }
);

const forklaunchRouterInstance = forklaunchRouter(
  '/testpath',
  zodSchemaValidator,
  openTelemetryCollector
);

const expressMiddleware = (req: Request, res: Response, next: NextFunction) => {
  noop(req, res, next);
  next();
};

const getHandler = handlers.get(
  zodSchemaValidator,
  '/test',
  {
    name: 'Test File',
    summary: 'Gets a sample file back',
    versions: {
      '1.0.0': {
        requestHeaders: {
          'x-test': string
        },
        responses: {
          200: file
        }
      },
      '2.0.0': {
        responses: {
          200: string
        }
      }
    },
    auth: {
      tokenPrefix: 'bb',
      basic: {
        login: (username: string, password: string) => {
          return username === 'basicuser' && password === 'password';
        }
      },
      forbiddenPermissions: new Set(['test:write']),
      allowedPermissions: new Set(['test:read']),
      surfacePermissions: (resourceId, req) => {
        return new Set(['test:read']);
      }
    }
  },
  expressMiddleware,
  (_req, res) => {
    if (res.version === '1.0.0') {
      res.status(200).send(
        new File(
          [
            `Hello World
      This is a test file generated by the server.

      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque ultricies, justo a facilisis posuere, urna massa dictum nisi, eu hendrerit erat est a velit.

      Curabitur dignissim, dolor ut consequat tincidunt, sapien velit sodales sem, et placerat nunc enim ornare enim. Vivamus at tristique risus, nec posuere elit. Donec at tristique massa, non maximus enim.

      - Item 1: The quick brown fox jumps over the lazy dog.
      - Item 2: Etiam eget ligula eu lectus lobortis condimentum.
      - Item 3: Mauris accumsan, massa non consectetur hendrerit, erat urna scelerisque sapien, sed cursus augue magna a lorem.

      Nulla facilisi. Proin facilisis, justo nec porttitor ullamcorper, nisi nibh dictum ex, eu suscipit erat enim in velit. Pellentesque a consequat nunc.

      Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Suspendisse potenti.

      End of file.`
          ],
          'test.txt',
          { type: 'text/plain' }
        )
      );
    } else if (res.version === '2.0.0') {
      res.status(200).send('Hello World');
    }
  }
);

const postHandler = handlers.post(
  zodSchemaValidator,
  '/test',
  {
    name: 'Test SSE',
    summary: 'Sends a stream of events',
    versions: {
      '1.0.0': {
        body: {
          f: string,
          m: union([array(number), string])
        },
        responses: {
          200: {
            contentType: 'text/event-stream',
            event: {
              id: string,
              data: {
                message: string
              }
            }
          }
        }
      },
      '2.0.0': {
        body: {
          f: string,
          m: union([array(number), string])
        },
        responses: {
          200: {
            contentType: 'text/event-stream',
            event: {
              id: string,
              data: {
                message: string
              }
            }
          }
        }
      }
    },
    auth: {
      basic: {
        login: (username: string, password: string) => {
          return username === 'basicuser' && password === 'password';
        }
      },
      headerName: 'xyz',
      allowedRoles: new Set(['test:write']),
      surfaceRoles: (resourceId, req) => {
        return new Set(['test:write']);
      },
      surfacePermissions: (resourceId, req) => {
        return new Set(['test:write']);
      }
    }
  },
  expressMiddleware,
  (req, res) => {
    res.status(200).sseEmitter(async function* () {
      try {
        for (let i = 0; i < 100; i++) {
          yield {
            id: i.toString(),
            data: {
              message: `Hello World ${req.body.f}`
            }
          };
          await new Promise((resolve) => setTimeout(resolve, 10));
        }
      } catch (e: unknown) {
        if (e instanceof Error) {
          res.status(500).send('There was an error');
        }
      }
      return;
    });
  }
);

export const jsonPatchHandler = handlers.patch(
  zodSchemaValidator,
  '/test',
  {
    name: 'Test JSON Patch',
    summary: 'Returns a JSON object',
    body: {
      f: string,
      h: uuid
    },
    query: {
      q: string
    },
    responses: {
      200: {
        json: {
          f: {
            g: array(date)
          }
        }
      }
    },
    auth: {
      jwt: {
        signatureKey: 'secret'
      },
      tokenPrefix: 'bb',
      decodeResource: async (token) => {
        return {
          sub: 'test'
        };
      },
      allowedPermissions: new Set(['test:write']),
      surfacePermissions: (resourceId, req) => {
        return new Set(['test:write']);
      }
    }
  },
  expressMiddleware,
  (_req, res) => {
    res.status(200).json({ f: { g: [new Date(), new Date()] } });
  }
);

const multipartHandler = handlers.post(
  zodSchemaValidator,
  '/test/multipart',
  {
    name: 'Test Multipart',
    summary: 'Returns a string',
    body: {
      multipartForm: {
        fileName: string,
        g: file
      }
    },
    requestHeaders: {
      'x-test': string
    },
    responses: {
      200: {
        text: string
      }
    }
  },
  expressMiddleware,
  async (req, res) => {
    res.status(200).send(`${req.body.fileName} ${await req.body.g.text()}`);
  }
);

const urlEncodedFormHandler = handlers.post(
  zodSchemaValidator,
  '/test/url-encoded-form/:id',
  {
    name: 'Test URL Encoded Form',
    summary: 'Returns a string',
    body: {
      urlEncodedForm: {
        f: string,
        h: optional(number)
      }
    },
    params: {
      id: string
    },
    responses: {
      200: {
        contentType: 'custom/content' as const,
        schema: {
          a: string
        }
      }
    }
  },
  expressMiddleware,
  (req, res) => {
    res.status(200).send({ a: `${req.body.f}` });
  }
);

const filePostHandler = handlers.post(
  zodSchemaValidator,
  '/test/file',
  {
    name: 'Test File Upload + Download',
    summary: 'Returns a file',
    body: file,
    responses: {
      200: file
    }
  },
  expressMiddleware,
  (req, res) => {
    res.status(200).send(req.body);
  }
);

const flRouter = forklaunchRouterInstance
  .get('/test', getHandler)
  .post('/test', postHandler)
  .patch('/test', jsonPatchHandler)
  .post('/test/multipart', multipartHandler)
  .post('/test/url-encoded-form/:id', urlEncodedFormHandler)
  .post('/test/file', filePostHandler);

const flNestedRouter = forklaunchRouter(
  '/nested',
  zodSchemaValidator,
  openTelemetryCollector
)
  .get('/test', getHandler)
  .post('/test', postHandler);

const sdkRoutes = flRouter.use(flNestedRouter);
forklaunchApplication.use(sdkRoutes);

const sampleController = {
  get: getHandler,
  post: postHandler,
  patch: jsonPatchHandler,
  multipart: multipartHandler
};
const sampleController2 = {
  urlEncodedForm: urlEncodedFormHandler,
  file: filePostHandler
};

const sampleSdkRouter = sdkRouter(
  zodSchemaValidator,
  sampleController,
  sdkRoutes
);

const sampleSdkRouter2 = sdkRouter(
  zodSchemaValidator,
  sampleController2,
  sdkRoutes
);

export const sampleSdkClient = sdkClient(zodSchemaValidator, {
  sample: {
    path: {
      a: {
        b: sampleSdkRouter
      }
    },
    c: {
      d: sampleSdkRouter2
    }
  }
});

export const sampleSdkClient2 = sdkClient(zodSchemaValidator, {
  sample: {
    path: {
      a: {
        b: sdkRoutes
      }
    }
  }
});

forklaunchApplication.get(
  '/alfalfa',
  {
    name: 'Test',
    summary: 'Test',
    responses: {
      200: string
    }
  },
  (req, res) => {
    res.status(200).send('Hello World');
  }
);

export function start() {
  const port = Number(process.env.PORT) || 6936;
  return forklaunchApplication.listen(port, () => {
    console.log(`server started on ${port}`);
  });
}

// Only run the server if this script is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  const port = Number(process.env.PORT) || 6936;
  forklaunchApplication.listen(port, () => {
    console.log(`server started on ${port}`);
  });
}

// Temporary shim for supporting TSGO experimental compiler
import type * as ExpressStaticCore from 'express-serve-static-core';
import { Range } from 'range-parser';
type TSGoShim = ParsedQs & Range & ExpressStaticCore.Application & JWTPayload;
