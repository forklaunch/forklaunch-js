volumes:
  forklaunch-postgres-data:
    driver: local
  forklaunch-mysql-data:
    driver: local
  forklaunch-mariadb-data:
    driver: local
  forklaunch-sqlite-data:
    driver: local
  forklaunch-better-sqlite-data:
    driver: local
  forklaunch-libsql-data:
    driver: local
  forklaunch-mssql-data:
    driver: local

networks:
  forklaunch-network:
    name: forklaunch-network
    driver: bridge

services:
  tempo:
    image: grafana/tempo:latest
    ports:
      - '3200:3200'
      - '4317:4317'
    networks:
      - forklaunch-network
    volumes:
      - './monitoring/tempo.yaml:/etc/tempo.yaml'
    command: '-config.file=/etc/tempo.yaml'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  loki:
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    networks:
      - forklaunch-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://0.0.0.0:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    networks:
      - forklaunch-network
    volumes:
      - './monitoring/prometheus.yaml:/etc/prometheus/prometheus.yml'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    networks:
      - forklaunch-network
    volumes:
      - './monitoring/grafana-provisioning/datasources:/etc/grafana/provisioning/datasources'
      - './monitoring/grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  otel-collector:
    image: otel/opentelemetry-collector:latest
    ports:
      - '4318:4318'
      - '8889:8889'
    networks:
      - forklaunch-network
    volumes:
      - './monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml'
    command: '--config=/etc/otel-collector-config.yaml'
    # healthcheck: # Disabled for minimal container - service works but no health check tools available
    #   test: ["CMD", "nc", "-z", "localhost", "8889"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s

  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: forklaunch-pg
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgresql
      POSTGRES_PASSWORD: postgresql
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    networks:
      - forklaunch-network
    volumes:
      - forklaunch-postgres-data:/var/lib/postgresql/forklaunch/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgresql -d forklaunch-dev -h 0.0.0.0"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mysql:
    image: mysql:latest
    hostname: mysql
    container_name: forklaunch-mysql
    restart: unless-stopped
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_DATABASE: forklaunch-dev
    networks:
      - forklaunch-network
    volumes:
      - forklaunch-mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "0.0.0.0", "-u", "mysql", "-pmysql"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mariadb:
    image: mariadb:latest
    hostname: mariadb
    container_name: forklaunch-mariadb
    restart: unless-stopped
    ports:
      - '3307:3306'
    environment:
      MARIADB_ROOT_PASSWORD: mariadb
      MARIADB_USER: mariadb
      MARIADB_PASSWORD: mariadb
      MARIADB_DATABASE: forklaunch-dev
    networks:
      - forklaunch-network
    volumes:
      - forklaunch-mariadb-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "0.0.0.0", "-u", "mariadb", "-pmariadb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mssql:
    image: mcr.microsoft.com/mssql/server:latest
    hostname: mssql
    container_name: forklaunch-mssql
    restart: unless-stopped
    ports:
      - '1433:1433'
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: Mssql123!
      MSSQL_PID: Developer
    networks:
      - forklaunch-network
    volumes:
      - forklaunch-mssql-data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S 0.0.0.0 -U sa -P Mssql123! -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # client:
  #   hostname: client
  #   container_name: forklaunch-client
  #   restart: always
  #   build:
  #     context: ./client
  #     dockerfile: ./Dockerfile.dev
  #   image: forklaunch_client:latest
  #   environment:
  #     NODE_ENV: development
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - forklaunch-network
  #   volumes:
  #     - ./client/src:/app/src

  iam:
    hostname: iam
    container_name: forklaunch-iam-${RUNTIME}
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile.${RUNTIME}.dev
    environment:
      NODE_ENV: development
      PORT: 8000
      DB_NAME: forklaunch-dev

      DB_HOST: postgres
      DB_USER: postgresql
      DB_PASSWORD: postgresql
      DB_PORT: 5432

      # DB_HOST: mysql
      # DB_USER: mysql
      # DB_PASSWORD: mysql
      # DB_PORT: 3306

      # DB_HOST: mariadb
      # DB_USER: mariadb
      # DB_PASSWORD: mariadb
      # DB_PORT: 3306

      # DB_HOST: mssql
      # DB_USER: sa
      # DB_PASSWORD: Mssql123!
      # DB_PORT: 1433

      REDIS_URL: redis://redis:6379
      HOST: 0.0.0.0
      PROTOCOL: http
      VERSION: v1
      DOCS_PATH: /docs
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_SERVICE_NAME: forklaunch-iam
    depends_on:
      - postgres
      - redis
    ports:
      - 8000:8000
    networks:
      - forklaunch-network
    working_dir: /app/iam
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  billing:
    hostname: billing
    container_name: forklaunch-billing-${RUNTIME}
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile.${RUNTIME}.dev
    environment:
      NODE_ENV: development
      PORT: 8001
      DB_NAME: forklaunch-dev

      DB_HOST: postgres
      DB_USER: postgresql
      DB_PASSWORD: postgresql
      DB_PORT: 5432

      # DB_HOST: mysql
      # DB_USER: mysql
      # DB_PASSWORD: mysql
      # DB_PORT: 3306

      # DB_HOST: mariadb
      # DB_USER: mariadb
      # DB_PASSWORD: mariadb
      # DB_PORT: 3306

      # DB_HOST: mssql
      # DB_USER: sa
      # DB_PASSWORD: Mssql123!
      # DB_PORT: 1433

      REDIS_URL: redis://redis:6379
      HOST: 0.0.0.0
      PROTOCOL: http
      VERSION: v1
      DOCS_PATH: /docs
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_SERVICE_NAME: forklaunch-billing
    depends_on:
      - postgres
      - redis
    ports:
      - 8001:8001
    networks:
      - forklaunch-network
    working_dir: /app/billing
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  sample-worker-worker:
    hostname: sample-worker-worker
    container_name: forklaunch-sample-worker-worker-${RUNTIME}
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile.${RUNTIME}.dev
    environment:
      NODE_ENV: development
      PORT: 8002
      DB_NAME: forklaunch-dev

      DB_HOST: postgres
      DB_USER: postgresql
      DB_PASSWORD: postgresql
      DB_PORT: 5432

      # DB_HOST: mysql
      # DB_USER: mysql
      # DB_PASSWORD: mysql
      # DB_PORT: 3306

      # DB_HOST: mariadb
      # DB_USER: mariadb
      # DB_PASSWORD: mariadb
      # DB_PORT: 3306

      # DB_HOST: mssql
      # DB_USER: sa
      # DB_PASSWORD: Mssql123!
      # DB_PORT: 1433

      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: forklaunch-sample-worker
      KAFKA_GROUP_ID: forklaunch-sample-worker-group
      HOST: 0.0.0.0
      PROTOCOL: http
      VERSION: v1
      DOCS_PATH: /docs
      SAMPLE_WORKER_QUEUE: forklaunch-sample-worker-queue
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_SERVICE_NAME: forklaunch-sample-worker-client
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
      # mysql:
      #   condition: service_started
      # mariadb:
      #   condition: service_started
      redis:
        condition: service_started
    networks:
      - forklaunch-network
    working_dir: /app/sample-worker

  sample-worker-server:
    hostname: sample-worker-server
    container_name: forklaunch-sample-worker-server-${RUNTIME}
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile.${RUNTIME}.dev
    environment:
      NODE_ENV: development
      PORT: 8002
      DB_NAME: forklaunch-dev

      DB_HOST: postgres
      DB_USER: postgresql
      DB_PASSWORD: postgresql
      DB_PORT: 5432

      # DB_HOST: mysql
      # DB_USER: mysql
      # DB_PASSWORD: mysql
      # DB_PORT: 3306

      # DB_HOST: mariadb
      # DB_USER: mariadb
      # DB_PASSWORD: mariadb
      # DB_PORT: 3306

      # DB_HOST: mssql
      # DB_USER: mssql
      # DB_PASSWORD: Mssql123!
      # DB_PORT: 1433

      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: forklaunch-sample-worker
      KAFKA_GROUP_ID: forklaunch-sample-worker-group
      HOST: 0.0.0.0
      PROTOCOL: http
      VERSION: v1
      DOCS_PATH: /docs
      SAMPLE_WORKER_QUEUE: forklaunch-sample-worker-queue
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_SERVICE_NAME: forklaunch-sample-worker-server
    depends_on:
      kafka:
        condition: service_healthy
      # postgres:
      #   condition: service_started
      # mysql:
      #   condition: service_started
      mariadb:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - 8002:8002
    networks:
      - forklaunch-network
    working_dir: /app/sample-worker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis/redis-stack-server:latest
    container_name: forklaunch-redis
    depends_on:
      - postgres
    restart: always
    ports:
      - '6379:6379'
    networks:
      - forklaunch-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: forklaunch-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - forklaunch-network
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: forklaunch-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - forklaunch-network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list >/dev/null 2>&1 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 15s
