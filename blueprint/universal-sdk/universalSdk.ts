/**
 * Generated by ForkLaunch
 * File: lib.ts
 * This is an auto-generated file. Modifications are encouraged but may inhibit automated upgrades.
 */

import { createAuthClient } from '@forklaunch/better-auth/client';
import type { BillingSdkClient } from '@forklaunch/blueprint-billing-base';
import type { IamSdkClient } from '@forklaunch/blueprint-iam-base';
import type { IamSdkClient as IamBetterAuthSdkClient } from '@forklaunch/blueprint-iam-better-auth';
import type { SampleWorkerSdkClient } from '@forklaunch/blueprint-sample-worker';
import { universalSdk } from '@forklaunch/universal-sdk';

export type ForklaunchPlatformUniversalSdk = {
  iam: IamSdkClient;
  billing: BillingSdkClient;
  sampleWorker: SampleWorkerSdkClient;
  iamBetterAuth: {
    betterAuth: ReturnType<typeof createAuthClient>;
    core: IamBetterAuthSdkClient;
  };
};

export const forklaunchPlatformUniversalSdk = async ({
  iamHost,
  billingHost,
  sampleWorkerHost,
  iamBetterAuthHost
}: {
  iamHost: string;
  billingHost: string;
  sampleWorkerHost: string;
  iamBetterAuthHost: string;
}): Promise<ForklaunchPlatformUniversalSdk> => ({
  iam: await universalSdk<IamSdkClient>({
    host: iamHost,
    registryOptions: {
      path: 'api/v1/openapi'
    }
  }),
  billing: await universalSdk<BillingSdkClient>({
    host: billingHost,
    registryOptions: {
      path: 'api/v1/openapi'
    }
  }),
  sampleWorker: await universalSdk<SampleWorkerSdkClient>({
    host: sampleWorkerHost,
    registryOptions: {
      path: 'api/v1/openapi'
    }
  }),
  iamBetterAuth: {
    betterAuth: createAuthClient({
      baseURL: iamBetterAuthHost
    }),
    core: await universalSdk<IamBetterAuthSdkClient>({
      host: iamBetterAuthHost,
      registryOptions: {
        path: 'api/v1/openapi'
      }
    })
  }
});
