name: CLI Release

on:
  push:
    tags:
      - 'cli-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: forklaunch-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: forklaunch-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: forklaunch-darwin-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: forklaunch-darwin-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: forklaunch-windows-x86_64.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            cli/target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('cli/Cargo.lock') }}
      
      - name: Build CLI
        working-directory: cli
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare artifact (Unix)
        if: matrix.os != 'windows-latest'
        working-directory: cli
        run: |
          cp target/${{ matrix.target }}/release/forklaunch ${{ matrix.artifact }}
          strip ${{ matrix.artifact }} || true
      
      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: cli
        run: |
          copy target\${{ matrix.target }}\release\forklaunch.exe ${{ matrix.artifact }}
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact }}
          path: cli/${{ matrix.artifact }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/cli-v') || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Set version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/cli-v}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: cli-v${{ steps.version.outputs.version }}
          release_name: CLI v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for artifact in artifacts/*/forklaunch-*; do
            filename=$(basename "$artifact")
            echo "Uploading $filename"
            gh release upload cli-v${{ steps.version.outputs.version }} "$artifact" --clobber
          done

  npm-publish:
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Set version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/cli-v}" >> $GITHUB_OUTPUT
          fi
      
      - name: Update package.json version
        working-directory: cli
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
      
      - name: Publish to npm
        working-directory: cli
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
