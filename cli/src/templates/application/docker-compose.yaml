volumes:
  {{app_name}}-{{database}}-data:
    driver: local

networks:
  {{app_name}}-network:
    name: {{app_name}}-network
    driver: bridge

services:{{#is_postgres}}
  postgresql:
    image: postgres:latest
    hostname: postgresql
    container_name: {{app_name}}-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgresql
      POSTGRES_PASSWORD: postgresql
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    networks:
      - {{app_name}}-network
    volumes:
      - {{app_name}}-{{database}}-data:/var/lib/postgresql/{{app_name}}/data{{/is_postgres}}{{#is_mongo}}
  mongodb:
    hostname: mongodb
    container_name: {{app_name}}-mongo
    restart: unless-stopped
    image: mongo:latest
    command: ['--replSet', 'rs0', '--logpath', '/var/log/mongodb/mongod.log']
    environment:
      MONGO_INITDB_DATABASE: {{app_name}}-dev
    ports:
      - '27017:27017'
    networks:
      - {{app_name}}-network
    volumes:
      - {{app_name}}-{{database}}-data:/data/db
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' localhost:27017/test --quiet
      interval: 2s
      timeout: 3s
      retries: 5
  mongo-init:
    image: mongo:latest
    depends_on:
      - mongodb
    networks:
      - {{app_name}}-network
    command: >
      sh -c "sleep 5; mongosh --host mongodb:27017 --eval '
      rs.initiate( {
        _id : \"rs0\",
        members: [
          { _id: 0, host: \"mongodb:27017\" }
        ]
      });
      while (!rs.isMaster().ismaster) {
          print(\"Waiting for replica set initialization...\");
          sleep(1000);
      }
      print(\"Replica set initialized and primary elected\");
      db.getSiblingDB(\"admin\").createUser({
        user: \"mongodb\",
        pwd: \"mongodb\",
        roles: [{ role: \"root\", db: \"admin\" }]
      });
      '"{{/is_mongo}}
  redis:
    image: redis/redis-stack-server:latest
    container_name: {{app_name}}-redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - {{app_name}}-network{{#projects}}{{#port}}
  {{name}}:
    hostname: {{name}}
    container_name: {{app_name}}-{{name}}-{{runtime}}
    image: {{app_name}}-{{name}}-{{runtime}}:latest
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      ENV: development
      HOST: 0.0.0.0
      PORT: '{{port}}'
      DB_NAME: {{app_name}}-{{name}}-dev{{^is_mongo}}
      DB_HOST: postgresql
      DB_USER: postgresql
      DB_PASSWORD: postgresql
      DB_PORT: '5432'{{/is_mongo}}{{#is_mongo}}
      DB_HOST: mongodb
      DB_USER: mongodb
      DB_PASSWORD: mongodb
      DB_PORT: '27017'{{/is_mongo}}
      REDIS_URL: redis://redis:6379
    depends_on:
      - {{database}}
      - redis
    ports:
      - {{port}}:{{port}}
    networks:
      - {{app_name}}-network
    volumes:
      - ./{{name}}:/{{app_name}}/{{name}}
      - /{{app_name}}/{{name}}/dist
      - /{{app_name}}/{{name}}/node_modules
      - /{{app_name}}/core/node_modules
      - /{{app_name}}/node_modules
    working_dir: /{{app_name}}/{{name}}
    entrypoint: ["{{#is_node}}pnpm{{/is_node}}{{#is_bun}}bun{{/is_bun}}", "run", "dev"] {{/port}}{{/projects}}

